/* Copyright (c) 2022, Idriss Riouak, riouakidriss@hotmail.it
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
 
 import org.improver.magpiebridge.utils.Pos;

 aspect INCLASS {
   
  syn boolean Expr.isInclAss() = false;
  syn boolean Expr.checkInclAss(Expr Dest, Expr Source) = false;
  syn boolean AssignAdditiveExpr.checkInclAss(Expr Dest, AddExpr Source);
  syn boolean AssignMultiplicativeExpr.checkInclAss(Expr Dest, MulExpr Source);

  eq AssignAdditiveExpr.checkInclAss(Expr Dest, AddExpr Source) = Dest.getId().equals(Source.getLeftOperand().getId()) || Dest.getId().equals(Source.getRightOperand().getId());
  eq AssignMultiplicativeExpr.checkInclAss(Expr Dest, MulExpr Source) = Dest.getId().equals(Source.getLeftOperand().getId())|| Dest.getId().equals(Source.getRightOperand().getId());
   
  syn boolean AssignExpr.isInclAss() = false;
  syn boolean AssignMultiplicativeExpr.isInclAss() {
    return checkInclAss(getDest(), getSource());
   }  
   syn boolean AssignAdditiveExpr.isInclAss(){
    return checkInclAss(getDest(), getSource());
   }
   syn java.util.List<Pair<Position, String>> AssignExpr.getRelatedInfo() {
    java.util.List<Pair<Position, String>> result = new ArrayList<>();
    result.add(
        Pair.make(getPosition(), prettyPrint() + " Unnecessary IF statement"));
    return result;
  }

   AssignExpr contributes warning(
       getCompilationUnit().pathName(),
       "Using a = a + 5 is the same thing as simply writing a += 5. This fix might help you avoid a double maintenance problem.",
       Analysis.AvailableAnalysis.STREQ, null, getRelatedInfo()) when isInclAss() to CompilationUnit.INCLASS();
   
      
 }
 
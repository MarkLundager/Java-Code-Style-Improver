/* Copyright (c) 2022, Idriss Riouak, riouakidriss@hotmail.it
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
 
import org.improver.magpiebridge.utils.Pos;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

aspect CommentChecker {
  syn String ASTNode.autoComment() = "/*Auto Generated comments*/\n";
  syn String ASTNode.hasComment(Position pos) = checkIfHasComment(pos.getFirstLine(), pos.getLastLine(), pos.getFirstCol(),
  pos.getLastCol());
  inh String ASTNode.checkIfHasComment(int lineStart, int lineEnd, int columnStart, int columnEnd);
  eq Program.getChild().checkIfHasComment(int lineStart, int lineEnd, int columnStart, int columnEnd) = "";

  eq CompilationUnit.getChild().checkIfHasComment(int lineStart, int lineEnd, int columnStart, int columnEnd){
    Pattern commentPattern = Pattern.compile("/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/|(//.*\n)");
    StringBuilder sb = new StringBuilder();
    StringBuilder comment = new StringBuilder();
    try{
      File file = new File(pathName());
      Scanner scnr = new Scanner(file);
      for(int i = 0; i<lineStart-1; i++){
          scnr.nextLine();
      }
      for(int i = 0; i < lineEnd+1-lineStart; i++){
          if(i < lineEnd-lineStart){
            sb.append(scnr.nextLine());
            sb.append("\n");
          }
          else{
            sb.append(scnr.nextLine().substring(0, columnEnd));
          }
      }
      String stringRepresentation = sb.toString();
      Matcher matcher = commentPattern.matcher(stringRepresentation);
      while(matcher.find()){
        comment.append(matcher.group());
        if(matcher.group().substring(matcher.group().length()-1).equals("/")){
          comment.append("\n");
        }
      }
      if(!(comment.toString().equals(""))){
        comment.insert(0,autoComment());
      }

      return comment.toString();
  }
  catch(Exception e){
    e.printStackTrace();
    return "";
  }
}

syn String ASTNode.lsp_hover() = "APa";
}

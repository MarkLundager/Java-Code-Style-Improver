/* Copyright (c) 2022, Idriss Riouak, riouakidriss@hotmail.it
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
 
import org.improver.magpiebridge.utils.Pos;

aspect IFRT {
  syn boolean Stmt.isBlock() = false;
  eq Block.isBlock() = true;

  inh boolean IfStmt.checkIFRT(boolean bool);

  //utility
  syn boolean IfStmt.onlyReturnBooleanLiteralInThen(boolean bool) = getThen().isBlock() && ((Block)getThen()).onlyReturnBoolLiteralInBlock(bool);

  //utility
  syn boolean ReturnStmt.returnsBooleanLiteral(boolean bool) {
    return getResult().isBooleanLiteral() && ((BooleanLiteral)getResult()).getLITERAL().equals(String.valueOf(bool));
  }
  //utility
  syn boolean Block.onlyReturnBoolLiteralInBlock(boolean bool) {
    return getNumStmt() > 0 
    && getStmt(0).isReturn() 
    && ((ReturnStmt)getStmt(0)).returnsBooleanLiteral(bool);
  }

  eq Program.getChild().checkIFRT(boolean bool) = false;

  eq Block.getStmt(int index).checkIFRT(boolean bool){
    if(getNumStmt() > index + 1){
      return ((IfStmt)getStmt(index)).onlyReturnBooleanLiteralInThen(bool)
      && getStmt(index+1).isReturn() 
      && ((ReturnStmt)getStmt(index+1)).returnsBooleanLiteral(!bool);
    }
    return false;
  }

  syn boolean IfStmt.isIFRT() = checkIFRT(true);
  syn boolean IfStmt.isIFRTReverse() = checkIFRT(false);


  syn Pair<Position, String> IfStmt.getIFRTRepair(){
    if(hasComment(getIFRTPosition()).equals("")){
      return Pair.make(getIFRTPosition(), "return " + getCondition().prettyPrint() + ";");
    }
    else{
      return Pair.make(getIFRTPosition(), hasComment(getIFRTPosition()) + "return " + getCondition().prettyPrint() + ";");
    }
  }
  syn Pair<Position, String> IfStmt.getIFRTReversedRepair(){
    if(hasComment(getIFRTPosition()).equals("")){
      return Pair.make(getIFRTPosition(), "return !(" + getCondition().prettyPrint() + ");");
    }
    else{
      return Pair.make(getIFRTPosition(), hasComment(getIFRTPosition()) + "return !(" + getCondition().prettyPrint() + ");");
    }
  } 

  //utility
  inh Stmt Stmt.getNextStmt();
  eq Block.getStmt(int index).getNextStmt(){
    if(getNumStmt() > index + 1){
      return getStmt(index + 1);
    }
    return null;
  }
  eq Program.getChild().getNextStmt() = null;


  syn java.util.List<Pair<Position, String>> IfStmt.getRelatedIFRTInfo() {
    java.util.List<Pair<Position, String>> result = new ArrayList<>();
    result.add(
        Pair.make(getIFRTPosition(), prettyPrint() + "\n" + getNextStmt().prettyPrint() + "Unnecessary IF statement preceding with return false"));
    return result;
  }

  syn Position IfStmt.getIFRTPosition() {
    Stmt s = getNextStmt();
    try {
      Position res =
          new Pos(lineStart(), s.lineEnd(), columnStart() - 1, s.columnEnd(),
                         getCompilationUnit().pathName());
      return res;
    } catch (Throwable t) {
    }
    return null;
  }



  IfStmt contributes warning(
    getCompilationUnit().pathName(),
    "IFRT",
    Analysis.AvailableAnalysis.IFRT, getIFRTReversedRepair(), getRelatedIFRTInfo(),getIFRTPosition()) 
    when
    isIFRTReverse()
    to CompilationUnit.IFRT();

  IfStmt contributes warning(
    getCompilationUnit().pathName(),
    "IFRT",
    Analysis.AvailableAnalysis.IFRT, getIFRTRepair(), getRelatedIFRTInfo(),getIFRTPosition()) 
    when
    isIFRT()
    to CompilationUnit.IFRT();
}


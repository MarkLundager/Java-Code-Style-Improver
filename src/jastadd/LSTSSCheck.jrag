/* Copyright (c) 2022, Idriss Riouak, riouakidriss@hotmail.it
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
 
import org.improver.magpiebridge.utils.Pos;

aspect LSSTSS {
  syn boolean Expr.isSubExpr() = false;
  eq SubExpr.isSubExpr() = true;


  syn int SubExpr.intAndVarUse(String id) {
    if(getLeftOperand().isVarAccess() && getRightOperand().isIntLit()){
        if(((VarAccess)getLeftOperand()).getID().equals(id)){
          return 1;
        }
    }
    else if (getRightOperand().isVarAccess() && getLeftOperand().isIntLit()){
      if(((VarAccess)getRightOperand()).getID().equals(id)){
        return 2;
      }
    }

    return 0;
  }


  syn int AssignSimpleExpr.isLSTSS(){
    if(getSource().isSubExpr() && getDest().isVarAccess()){
      return ((SubExpr)getSource()).intAndVarUse(((VarAccess)getDest()).getID());
    }
    return 0;
  } 


  syn Pair<Position, String> AssignSimpleExpr.getLSTSSRepair(){
    if(hasComment(getPosition()).equals("")){
        return Pair.make(getPosition(), getDest().prettyPrint() + " -= " + ((SubExpr)getSource()).getRightOperand().prettyPrint());
    }
    else{
        return Pair.make(getPosition(), hasComment(getPosition()) + getDest().prettyPrint() + " -= " +((SubExpr)getSource()).getRightOperand().prettyPrint());
    }
  }

  AssignSimpleExpr contributes warning(
    getCompilationUnit().pathName(),
    "LSTSS",
    Analysis.AvailableAnalysis.LATSA, getLSTSSRepair(), getRelatedInfo(),getPosition()) 
    when
    isLSTSS() == 1
    to CompilationUnit.LSTSS();
}


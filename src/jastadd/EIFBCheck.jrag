/* Copyright (c) 2022, Idriss Riouak, riouakidriss@hotmail.it
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
 
import org.improver.magpiebridge.utils.Pos;

aspect EIFB {

  syn String ASTNode.indentationByColumn(int a){
    String s = "";
    for(int i = 0; i<a; i++){
      s += " ";
    }
    return s;
  }


  syn boolean IfStmt.isEIFB() = hasElse() && getThen().isBlock() && ((Block) getThen()).getNumStmt() == 0;
  syn Pair<Position, String> IfStmt.getEIFBRepair(){
    if(hasComment(getPosition()).equals("")){
      return Pair.make(getPosition(), "if(!(" + getCondition().prettyPrint() + "))" + ((Block)getElse()).blockPrettyPrint(columnStart()-1));
    }
    else{
      return Pair.make(getPosition(),hasComment(getPosition()) + "if(!(" + getCondition().prettyPrint() + "))" + ((Block)getElse()).blockPrettyPrint(columnStart()-1));
    }
  } 


  syn String Block.blockPrettyPrint(int indentation){

    StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    String s =indentationByColumn(indentation +4);
    for(Stmt stmt : getStmts()){ 
        sb.append(s + stmt.prettyPrint() + "\n");
    }
    sb.append(indentationByColumn(indentation) + "}");
    return sb.toString();
  }

  syn java.util.List<Pair<Position, String>> IfStmt.getRelatedInfoEIFB() {
    java.util.List<Pair<Position, String>> result = new ArrayList<>();
    result.add(
    Pair.make(getPosition(), "\n" + prettyPrint() + "\nEmpty then-block in If Statement with non-empty else-block is same as if statement with negated condition"));
    return result;
  }

  IfStmt contributes warning(
    getCompilationUnit().pathName(),
    "EIFBWarning",
    Analysis.AvailableAnalysis.IFRC, getEIFBRepair(), getRelatedInfoEIFB(),getPosition()) 
    when
    isEIFB()
    to CompilationUnit.EIFB();
}

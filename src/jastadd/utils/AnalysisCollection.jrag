/* Copyright (c) 2021, Idriss Riouak <idriss.riouak@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import com.ibm.wala.cast.tree.CAstSourcePositionMap.Position;
import com.ibm.wala.util.collections.Pair;

import org.improver.analysis.utils.Analysis;
import org.improver.analysis.utils.Warning;

aspect Analysis {

  coll TreeSet<Warning> CompilationUnit.STREQ()[new TreeSet<Warning>()] with add
      root CompilationUnit;
  coll TreeSet<Warning> CompilationUnit.IFRC()[new TreeSet<Warning>()] with add
      root CompilationUnit;
  coll TreeSet<Warning> CompilationUnit.IFRT()[new TreeSet<Warning>()] with add
      root CompilationUnit;
  coll TreeSet<Warning> CompilationUnit.EIFB()[new TreeSet<Warning>()] with add
      root CompilationUnit;
  coll TreeSet<Warning> CompilationUnit.LATSA()[new TreeSet<Warning>()] with add
      root CompilationUnit;
  coll TreeSet<Warning> CompilationUnit.LMTSM()[new TreeSet<Warning>()] with add
      root CompilationUnit;
  coll TreeSet<Warning> CompilationUnit.LDTSD()[new TreeSet<Warning>()] with add
      root CompilationUnit;
  coll TreeSet<Warning> CompilationUnit.LSTSS()[new TreeSet<Warning>()] with add
      root CompilationUnit;


  /**This class contains all the information related to a specific warning:
   * Location: file path.
   * Analysis: analysis identifier.
   * LineStart, ColumnStart, LineEnd, ColumnEnd: are source code location.
   * errMsg: contains a description of the error message.
   */

protected
  Warning ASTNode.warning(String loc, String msg,
                          Analysis.AvailableAnalysis analysis,
                          Pair<Position, String> repair,
                          java.util.List<Pair<Position, String>> relatedInfo,
                          Position pos) {
    return new Warning(loc, analysis, pos.getFirstLine(), pos.getFirstCol() - 1, pos.getLastLine(),
    pos.getLastCol(), msg, repair, relatedInfo);
  }

  syn Integer ASTNode.lineStart() = getLine(getStart());
  syn Integer ASTNode.lineEnd() = getLine(getEnd());
  syn Integer ASTNode.columnStart() = getColumn(getStart());
  syn Integer ASTNode.columnEnd() = getColumn(getEnd());



inh CompilationUnit ASTNode.getCompilationUnit();
eq CompilationUnit.getChild().getCompilationUnit() = this;
eq Program.getChild().getCompilationUnit() = null;
}